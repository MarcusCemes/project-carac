<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="socketHandler">
    <Locals>
      <Local name="ack" type="bool" xsi:type="array" size="1" />
      <Local name="buffer" type="num" xsi:type="array" size="1024" />
      <Local name="bytesRead" type="num" xsi:type="array" size="1" />
      <Local name="payloadSize" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  while true
    ack = true
    bytesRead = sioGet(socket, buffer)

    if bytesRead > 0
      logMsg("[SOCKET] UDP packet (" + toString("", bytesRead) + " B)")
    endIf

    if bytesRead >= 3
      payloadSize = bytesRead - 3
    endIf

    if bytesRead < 3
      logMsg("[SOCKET] Too few bytes read, misconfigured socket timeout?", 2)
      ack = false

    elseIf buffer[0] != MAGIC_HEADER
      logMsg("[SOCKET] Missing magic header", 3)
      ack = false

    elseIf buffer[2] == 0 and payloadSize == 0
      logMsg("[SOCKET] Handshake request")

    elseIf buffer[2] == 1 and payloadSize == 1
      logMsg("[SOCKET] Halt request")

      if buffer[3] == 1
        logMsg("[STOP] Returning to start")
        call sendAck(buffer[1])
        resetMotion()
        enablePower()
        movej(BASE_POSE, mount, SLOW_CONFIG)
        waitEndMove()
      endIf

      // Manually create the program stop task
      taskCreate "~RemoteControl", 1, stop()
      return

    elseIf buffer[2] == 2 and payloadSize == 1
      logMsg("[SOCKET] Power request: " + toString("", buffer[3]))
      if buffer[3] == 1
        enablePower()
      else
        disablePower()
      endIf

    elseIf buffer[2] == 3 and payloadSize == 1
      logMsg("[SOCKET] Move home request")

      wait(!motionQueued)

      motionType = buffer[3]
      moveConfig.blend = off

      if motionType == 2
        pose = BASE_POSE
      else
        target = BASE_POSITION
      endIf

      selectedTool = mount
      motionQueued = true

    elseIf buffer[2] == 4 and payloadSize == 1
      logMsg("[SOCKET] Set reporting request")
      reportEnabled = buffer[3] != 0

    elseIf buffer[2] == 5 and payloadSize == 4
      logMsg("[SOCKET] Set report frequency request")
      fromBinary(buffer[3], 4, "4.0b", reportInterval)

    elseIf buffer[2] == 6 and payloadSize == 3
      logMsg("[SOCKET] Configuration request")
      call decodeConfig(target, buffer[3])

    elseIf buffer[2] == 7 and payloadSize == 11
      logMsg("[SOCKET] Set profile")
      call decodeDesc(moveConfig, buffer[3])

    elseIf buffer[2] == 8 and payloadSize == 9
      logMsg("[SOCKET] Blending request")
      call decodeBlend(moveConfig, buffer[3])

    elseIf buffer[2] == 9 and payloadSize == 24
      logMsg("[SOCKET] Tool offset request")
      call decodeTool(endEffector, buffer[3])

    elseIf buffer[2] == 10 and payloadSize == 0
      logMsg("[SOCKET] Reset movement ID")
      setMoveId(0)


    elseIf buffer[2] == 32 and payloadSize == 24
      logMsg("[SOCKET] Direct move request")

      wait(!motionQueued)
      call decodeLocation(target, buffer[3])

      motionType = 1
      selectedTool = endEffector
      motionQueued = true

    elseIf buffer[2] == 33 and payloadSize == 24
      logMsg("[SOCKET] Linear move request")

      wait(!motionQueued)
      call decodeLocation(target, buffer[3])

      motionType = 0
      selectedTool = endEffector
      motionQueued = true

    elseIf buffer[2] == 34 and payloadSize == 24
      logMsg("[SOCKET] Joint move request")

      wait(!motionQueued)
      call decodePose(pose, buffer[3])

      motionType = 2
      selectedTool = endEffector
      motionQueued = true

    elseIf buffer[2] == 35 and payloadSize == 48
      logMsg("[SOCKET] Circular movement request")

      wait(!motionQueued)

      call decodeLocation(intermediate, buffer[3])
      call decodeLocation(target, buffer[27])

      motionType = 3
      selectedTool = endEffector
      motionQueued = true


    else
      logMsg("[SOCKET] Unknown message: " + toString("", buffer[2]) + " with payload size " + toString("", payloadSize), 3)
      ack = false

    endIf

    if ack
      call sendAck(buffer[1])
    endIf

  endWhile
end
]]></Code>
  </Program>
</Programs>